// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Semaforo.Logic.Models;

namespace Semaforo.Logic.Migrations
{
    [DbContext(typeof(db_9bc4da_semaforoContext))]
    [Migration("20220927073047_user_system_added")]
    partial class user_system_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Account_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Account_Status_ID");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Account_Type_ID");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Cancellation_Date");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Opening_Date");

                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("Sale_ID");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Settlement_Date");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("Site_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SaleId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("ACCOUNTS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.AccountPayment", b =>
                {
                    b.Property<int>("AccountPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Account_Payment_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Payment_Date");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("Site_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("AccountPaymentId");

                    b.HasIndex("AccountId");

                    b.ToTable("ACCOUNT_PAYMENTS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.AccountStatus", b =>
                {
                    b.Property<int>("AccountStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Account_Status_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("AccountStatusId");

                    b.ToTable("ACCOUNT_STATUS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Account_Type_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("AccountTypeId");

                    b.ToTable("ACCOUNT_TYPES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .HasColumnType("int")
                        .HasColumnName("Attendance_ID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_ID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.Property<DateTime?>("StopDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Stop_Date");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ATTENDANCE");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Brand_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("Supplier_ID");

                    b.HasKey("BrandId");

                    b.ToTable("BRANDS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Category_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("CategoryId");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Client_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AccountAmountLimit")
                        .HasColumnType("money")
                        .HasColumnName("Account_Amount_Limit");

                    b.Property<int?>("AccountDaysLimit")
                        .HasColumnType("int")
                        .HasColumnName("Account_Days_Limit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<int>("ClientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Status_ID");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Facebook")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("FacebookName")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("Facebook_Name")
                        .IsFixedLength(true)
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("Last_Modified_By");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_Modify");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Last_Name")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("LastNameMother")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Last_Name_Mother")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Profile_Image");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<bool?>("Student")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<bool>("Whatsapp")
                        .HasColumnType("bit");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientStatusId");

                    b.ToTable("CLIENTS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ClientStatus", b =>
                {
                    b.Property<int>("ClientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Client_Status_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("ClientStatusId");

                    b.ToTable("CLIENT_STATUS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Embroidery", b =>
                {
                    b.Property<int>("EmbroideryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Embroidery_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorSecuence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Color_Secuence");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte[]>("DstFile")
                        .HasMaxLength(10)
                        .HasColumnType("binary(10)")
                        .HasColumnName("DST_File")
                        .IsFixedLength(true);

                    b.Property<byte[]>("EmbFile")
                        .HasMaxLength(50)
                        .HasColumnType("binary(50)")
                        .HasColumnName("EMB_File")
                        .IsFixedLength(true);

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("ImageDesign")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Image_Design")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("School_ID");

                    b.Property<string>("Stiches")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmbroideryId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EMBROIDERIES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Employee_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Cellphone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End_Date");

                    b.Property<string>("Facebook")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<byte[]>("FacebookProfileImage")
                        .HasColumnType("image")
                        .HasColumnName("Facebook_Profile_Image");

                    b.Property<string>("FirstLastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("First_Last_Name")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("HealthInfo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Health_Info")
                        .IsFixedLength(true)
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Marital_Status")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Second_Last_Name")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start_Date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<bool?>("WhatsApp")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("EMPLOYEES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.EmployeeRole", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_ID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EMPLOYEE_ROLE");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.EmployeeSalary", b =>
                {
                    b.Property<int>("EmployeeSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Employee_Salary_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_ID");

                    b.Property<decimal?>("SalaryDay")
                        .HasColumnType("money")
                        .HasColumnName("Salary_Day");

                    b.Property<decimal?>("SalaryHour")
                        .HasColumnType("money")
                        .HasColumnName("Salary_Hour");

                    b.Property<int?>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("EmployeeSalaryId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EMPLOYEE_SALARY");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.EmployeeSchedule", b =>
                {
                    b.Property<int>("EmployeeScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Employee_Schedule_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("BreakTime")
                        .HasColumnType("time")
                        .HasColumnName("Break_Time");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_ID");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("Start_Time");

                    b.Property<TimeSpan?>("StopTime")
                        .HasColumnType("time")
                        .HasColumnName("Stop_Time");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("EmployeeScheduleId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EMPLOYEE_SCHEDULE");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("Brand_ID");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<int?>("ProductPictureId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Picture_ID");

                    b.Property<long?>("SerialCount")
                        .HasColumnType("bigint")
                        .HasColumnName("Serial_Count");

                    b.Property<bool?>("Serialize")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductPictureId");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_ID");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PRODUCT_CATEGORY");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductCombo", b =>
                {
                    b.Property<int>("ProductComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_Combo_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ProductComboId");

                    b.ToTable("PRODUCT_COMBOS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductComboDetail", b =>
                {
                    b.Property<int>("ProductComboDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_Combo_Detail_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmbroideryId")
                        .HasColumnType("int")
                        .HasColumnName("Embroidery_ID");

                    b.Property<int>("ProductComboId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Combo_ID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.HasKey("ProductComboDetailId");

                    b.HasIndex("EmbroideryId");

                    b.HasIndex("ProductComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_COMBO_DETAILS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductPicture", b =>
                {
                    b.Property<int>("ProductPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_Picture_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("Create_Date");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.HasKey("ProductPictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_PICTURES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductPrice", b =>
                {
                    b.Property<int>("PriceId")
                        .HasColumnType("int")
                        .HasColumnName("Price_ID");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("Size_ID");

                    b.HasKey("PriceId")
                        .HasName("PK_PRICES_1");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("PRODUCT_PRICES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductProvider", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("Provider_ID");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.ToTable("PRODUCT_PROVIDERS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductSchool", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("School_ID");

                    b.HasKey("ProductId", "SchoolId")
                        .HasName("PK_PRODUCTS_SCHOOLS");

                    b.HasIndex("SchoolId");

                    b.ToTable("PRODUCT_SCHOOLS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Provider_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BankAccounts")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Bank_Accounts");

                    b.Property<string>("Cellphone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Contact_Name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Whatsapp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProviderId");

                    b.ToTable("PROVIDERS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Create_date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("ntext")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("Last_modified_by");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_modify");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("RoleId");

                    b.ToTable("ROLES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Sale_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<string>("ClientName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Client_Name")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Sale_Date");

                    b.Property<int>("SaleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Sale_Type_ID");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("Site_ID");

                    b.Property<decimal?>("Total")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("SaleId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SaleTypeId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("SALES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.SalesDetail", b =>
                {
                    b.Property<int>("SaleDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Sale_Detail_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("Sale_ID");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("Size_ID");

                    b.Property<decimal?>("SpecialPrice")
                        .HasColumnType("money")
                        .HasColumnName("Special_Price");

                    b.HasKey("SaleDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.HasIndex("SizeId");

                    b.ToTable("SALES_DETAILS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.SalesType", b =>
                {
                    b.Property<int>("SaleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Sale_Type_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("SaleTypeId");

                    b.ToTable("SALES_TYPES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("School_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Phone_Number");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<string>("PrincipalInfo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Principal_Info");

                    b.Property<int>("SchoolLevelId")
                        .HasColumnType("int")
                        .HasColumnName("School_Level_ID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SchoolId");

                    b.HasIndex("SchoolLevelId");

                    b.ToTable("SCHOOLS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.SchoolLevel", b =>
                {
                    b.Property<int>("SchoolLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("School_Level_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SchoolLevelId");

                    b.ToTable("SCHOOL_LEVELS");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Site_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Location")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<byte[]>("Logo")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("SiteId");

                    b.ToTable("SITES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Size_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("SizeId");

                    b.ToTable("SIZES");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Stock_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasDefaultValueSql("((100))")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date");

                    b.Property<decimal?>("PriceSpecial")
                        .HasColumnType("money")
                        .HasColumnName("Price_Special");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SaleDetailId")
                        .HasColumnType("int")
                        .HasColumnName("Sale_Detail_ID");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int")
                        .HasColumnName("Serial_Number");

                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasColumnName("Site_ID");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("Size_ID");

                    b.HasKey("StockId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleDetailId");

                    b.HasIndex("SiteId");

                    b.HasIndex("SizeId");

                    b.ToTable("STOCK");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Create_Date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_By");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("Last_Modified_By");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_Modify");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Modern_Spanish_CI_AS");

                    b.HasKey("UserId");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Account", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.AccountStatus", "AccountStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusId")
                        .HasConstraintName("FK_ACCOUNTS_ACCOUNT_STATUS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_ACCOUNTS_ACCOUNT_TYPES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ACCOUNTS_CLIENTS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Sale", "Sale")
                        .WithMany("Accounts")
                        .HasForeignKey("SaleId")
                        .HasConstraintName("FK_ACCOUNTS_SALES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Site", "Site")
                        .WithMany("Accounts")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_ACCOUNTS_SITES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ACCOUNTS_USERS")
                        .IsRequired();

                    b.Navigation("AccountStatus");

                    b.Navigation("AccountType");

                    b.Navigation("Client");

                    b.Navigation("Sale");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.AccountPayment", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Account", "Account")
                        .WithMany("AccountPayments")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_ACCOUNT_PAYMENTS_ACCOUNTS")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Attendance", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_ATTENDANCE_EMPLOYEES")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Client", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.ClientStatus", "ClientStatus")
                        .WithMany("Clients")
                        .HasForeignKey("ClientStatusId")
                        .HasConstraintName("FK_CLIENTS_CLIENT_STATUS")
                        .IsRequired();

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Embroidery", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.School", "School")
                        .WithMany("Embroideries")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_EMBROIDERIES_SCHOOLS");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Employee", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EMPLOYEES_USERS");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.EmployeeRole", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EMPLOYEE_ROLE_EMPLOYEES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Role", "Role")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EMPLOYEE_ROLE_ROLE")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.EmployeeSalary", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Employee", "Employee")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EMPLOYEE_SALARY_EMPLOYEES")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.EmployeeSchedule", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Employee", "Employee")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EMPLOYEE_SCHEDULE_EMPLOYEES")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Product", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_PRODUCTS_BRANDS");

                    b.HasOne("Semaforo.Logic.Models.ProductPicture", "ProductPicture")
                        .WithMany("Products")
                        .HasForeignKey("ProductPictureId")
                        .HasConstraintName("FK_PRODUCTS_PRODUCT_PICTURES");

                    b.Navigation("Brand");

                    b.Navigation("ProductPicture");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductCategory", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_PRODUCT_CATEGORY_CATEGORIES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRODUCT_CATEGORY_PRODUCTS")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductComboDetail", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Embroidery", "Embroidery")
                        .WithMany("ProductComboDetails")
                        .HasForeignKey("EmbroideryId")
                        .HasConstraintName("FK_PRODUCT_COMBO_DETAILS_EMBROIDERIES");

                    b.HasOne("Semaforo.Logic.Models.ProductCombo", "ProductCombo")
                        .WithMany("ProductComboDetails")
                        .HasForeignKey("ProductComboId")
                        .HasConstraintName("FK_PRODUCT_COMBO_DETAILS_PRODUCT_COMBOS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany("ProductComboDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRODUCT_COMBO_DETAILS_PRODUCTS");

                    b.Navigation("Embroidery");

                    b.Navigation("Product");

                    b.Navigation("ProductCombo");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductPicture", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRODUCT_PICTURES_PRODUCTS")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductPrice", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRICES_PRODUCTS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Size", "Size")
                        .WithMany("ProductPrices")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_PRICES_SIZES");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductProvider", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRODUCT_PROVIDERS_PRODUCTS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_PRODUCT_PROVIDERS_PROVIDERS")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductSchool", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany("ProductSchools")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRODUCT_SCHOOLS_PRODUCTS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.School", "School")
                        .WithMany("ProductSchools")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PRODUCT_SCHOOLS_SCHOOLS")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Sale", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Client", "Client")
                        .WithMany("Sales")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_SALES_CLIENTS");

                    b.HasOne("Semaforo.Logic.Models.SalesType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .HasConstraintName("FK_SALES_SALES_TYPES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Site", "Site")
                        .WithMany("Sales")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_SALES_SITES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SALES_USERS")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("SaleType");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.SalesDetail", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany("SalesDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_SALES_DETAILS_PRODUCTS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Sale", "Sale")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SaleId")
                        .HasConstraintName("FK_SALES_DETAILS_SALES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Size", "Size")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_SALES_DETAILS_SIZES");

                    b.Navigation("Product");

                    b.Navigation("Sale");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.School", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.SchoolLevel", "SchoolLevel")
                        .WithMany("Schools")
                        .HasForeignKey("SchoolLevelId")
                        .HasConstraintName("FK_SCHOOLS_SCHOOL_LEVELS")
                        .IsRequired();

                    b.Navigation("SchoolLevel");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Stock", b =>
                {
                    b.HasOne("Semaforo.Logic.Models.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_STOCK_PRODUCTS")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.SalesDetail", "SaleDetail")
                        .WithMany("Stocks")
                        .HasForeignKey("SaleDetailId")
                        .HasConstraintName("FK_STOCK_SALES_DETAILS");

                    b.HasOne("Semaforo.Logic.Models.Site", "Site")
                        .WithMany("Stocks")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_STOCK_SITES")
                        .IsRequired();

                    b.HasOne("Semaforo.Logic.Models.Size", "Size")
                        .WithMany("Stocks")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_STOCK_SIZES");

                    b.Navigation("Product");

                    b.Navigation("SaleDetail");

                    b.Navigation("Site");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Account", b =>
                {
                    b.Navigation("AccountPayments");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.AccountStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Client", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ClientStatus", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Embroidery", b =>
                {
                    b.Navigation("ProductComboDetails");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("EmployeeRoles");

                    b.Navigation("EmployeeSalaries");

                    b.Navigation("EmployeeSchedules");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductComboDetails");

                    b.Navigation("ProductPictures");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductSchools");

                    b.Navigation("SalesDetails");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductCombo", b =>
                {
                    b.Navigation("ProductComboDetails");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.ProductPicture", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Role", b =>
                {
                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Sale", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.SalesDetail", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.SalesType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.School", b =>
                {
                    b.Navigation("Embroideries");

                    b.Navigation("ProductSchools");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.SchoolLevel", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Site", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Sales");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.Size", b =>
                {
                    b.Navigation("ProductPrices");

                    b.Navigation("SalesDetails");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Semaforo.Logic.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Employees");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
